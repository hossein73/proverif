(*
  Article: A lightweight and strongly secure two-factor authentication scheme
  for medical wireless sensor networks in healthcare systems
  Authors: Mahdi Fotouhi, Hossein Abdi
  Publish Date:
  DOI:
*)

(* types and variables *)
free c1:channel. (* public channel *)
free c2:channel. (* public channel *)
free secureC1:channel[private]. (* secure channel for Sensors Registeration phase *)
free secureC2:channel[private]. (* secure channel for Users Registeration phase *)

free IDi: bitstring[private]. (*user i'th identity*)
free PWi: bitstring[private]. (*user i'th password*)
weaksecret PWi. (* for check password offline gussing attack*)
free GIDj: bitstring[private]. (*gateway node j'th identity*)
free SIDk: bitstring[private]. (*sensor node k'th identity*)
free Gj: bitstring[private]. (*gateway node j'th secret key*)
free Nl:bitstring[private]. (* network identier *)

free sku:bitstring[private].
free skg:bitstring[private].
free sks:bitstring[private].

table Sensors(bitstring,bitstring,bitstring,bitstring,bitstring).
(* table columns : IDi,CIDi,HPWi,Rx *)
table Users(bitstring,bitstring,bitstring,bitstring).

fun h(bitstring):bitstring. (* hash function*)
fun xor(bitstring,bitstring):bitstring. (* exclusive OR function *)
fun con(bitstring,bitstring):bitstring. (* CONCATENATE function *)
equation forall m:bitstring,n:bitstring;xor(xor(m,n),n)=m. (* xor inverse function*)

(* Sensor registration Phase *)
let SensorReg =
new Ry:bitstring;
new Rz:bitstring;
new QID_k:bitstring;
let SG_k = h(con(SIDk,con(Gj,Nl))) in
(* inject data to sensor by a secure channel *)
out(secureC1,(SIDk,SG_k,GIDj,Ry,Rz,QIDk));
let hRz = h(Rz) in
(* save new sensor data to database*)
insert Sensors(SIDk,QIDk,Nl,Ry,hRz).

(* User registration Phase *)
let UserReg =
in(secureC2,(IDreg:bitstring,HPWreg:bitstring));
new CIDi:bitstring;
new Rx:bitstring;
insert Users(IDreg,CIDi,HPWreg,Rx);
let A1 = h(con(CIDi,con(Rx,con(GIDj,Gj)))) in
let A2 = xor(h(con(IDi,Gj)),h(con(IDi,HPWi))) in
(* send data to user by a secure channel *)
out(secureC2,(A1,A2,CIDi,GIDj)).

(* GateWay Authentication Phase *)
let GWAuth =
in(c,(gCIDi:bitstring,gGIDj:bitstring,gB2:bitstring,gB3:bitstring,gB4:bitstring));
if GIDj = gGIDj then
if CIDi = gCIDi then
get Users(IDi,=gCIDi,HPWi,Rx) in
let gB1 = h(con(gCIDi,con(Rx,con(gGIDj,Gj)))) in
let gRu = xor(gB2,xor(gB1,HPWi)) in
if gB4 = h(con(gCIDi,con(gGIDj,con(SIDk,con(gB1,con(IDi,gRu)))))) then
new Rg:bitstring;
new Rznew:bitstring;
let SIDk = xor(gB3,xor(IDi,gRu)) in
(* check SIDk *)
new QIDknew:bitstring;
(* fetch Ry from database *)
get Sensors(=SIDk,QIDk,Nl,Ry,hRz) in
let SGk = h(con(SIDk,con(Gj,Nl))) in
let S = h(con(SGk,gGIDj)) in
let B5 = xor(xor(Ry,xor(S,xor(gRu,HPWi)))) in
let B6 = xor(Rg,xor(S,xor(Ry,SIDk))) in
let B7 = xor(QIDknew,xor(Rg,Ry)) in
let B8 = xor(Rznew,h(con(S,con(Ry,Rg)))) in
let B9 = h(con(QIDk,con(B7,con(B8,con(SGk,con(gRu,con(HPWi,Rg))))))) in
let M2 = (QIDk,B5,B6,B7,B8,B9) in
out(c2,M2);

in(c2,(gB10:bitstring,gB11:bitstring,gB12:bitstring));
let Ry' = h(Ry) in
let Rz' = xor(Rg,xor(S,gB10)) in
if (h(Rz)=h(Rz')) then
let Rs = xor(gB11,h(con(SGk,Rg)))
(* GateWay node Macro *)
let GW = SensorReg | UserReg | !(GWAuth).
(*****************************)
(* User Authentication Phase *)
(*****************************)
let User =
new R0:bitstring;
let HPWi = h(con(PWi,R0)) in
out(secureC2,(IDi,HPWi));
in(secureC2,(A1reg:bitstring, A2reg:bitstring, CIDireg:bitstring, GIDjreg:bitstring));
let A3 = xor(h(con(IDi,PWi)),R0) in
(* store A1,A2,A3,CIDi,GIDj in mobile device *)
!
(
    new uRu:bitstring;
    new uSIDk:bitstring;
    let uR0 = xor(A3,h(con(IDi,PWi))) in
    let uHPWi = h(con(PWi,uR0)) in
    let B1 = xor(A1reg,uHPWi) in
    let B2 = xor(B1,xor(uHPWi,uRu)) in
    let B3 = xor(uSIDk,xor(IDi,uRu)) in
    let B4 = h(con(CIDireg,con(GIDjreg,con(uSIDk,con(B1,con(IDi,uRu)))))) in
    let M1 = (CIDireg, GIDjreg, B2, B3, B4) in
    out(c1,M1);

    in(c1,(uB13:bitstring,uB14:bitstring,uB15:bitstring,uB16:bitstring,uB17:bitstring));
    let uRg = xor(uB14,h(con(uRu,IDi)) in
    let uRs = xor(uB15,h(con(uRu,con(uRg,uHPWi)))) in
    let CIDinew = xor(uB16,h(con(xor(A2reg,h(con(IDi,uHPWi))),uRs))) in
    let sku = h(con(con(xor(uRu,uHPWi),uRg),uRs)) in
    let B17bar = h(con(sku,con(IDi,con()))) in
    if uB17 = B17bar then
    let A1new = xor(uB13,xor(h(con(uRu,uHPWi),uHPWi)) in
    (* store CIDinew , A1new in mobile device *)
    0
).
(*******************************)
(* Sensor Authentication Phase *)
(*******************************)
let Sensor =
in(secureC1,(SIDkreg:bitstring,SG_kreg:bitstring,GIDjreg:bitstring,Ryreg:bitstring,Rzreg:bitstring,QIDkreg:bitstring));
